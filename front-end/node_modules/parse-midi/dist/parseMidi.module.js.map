{"version":3,"file":"parseMidi.module.js","sources":["../src/lib/controlChangeUtils.ts","../src/lib/constants.ts","../src/parseMidi.ts"],"sourcesContent":["/**\n * Return either `offValue` or `onValue` depending on the `controlValue` passed.\n */\nconst onOff = <T1, T2>(controlValue: number, offValue: T1, onValue: T2) =>\n\tcontrolValue < 64 ? offValue : onValue;\n\n/**\n * Return either `offValue` or `onValue` depending on the `controlValue` passed.\n *\n * The only accepted `controlValue` values are `0` and `127` in order to match\n * the MIDI specification for channel mode messages.\n */\nconst onOffStrict = <T1, T2>(controlValue: number, offValue: T1, onValue: T2) => {\n\tif (controlValue === 0) {\n\t\treturn offValue;\n\t}\n\tif (controlValue === 127) {\n\t\treturn onValue;\n\t}\n\treturn null;\n};\n\n/**\n * For a given `controlNumber` and `controlValue`, get the human-readable\n * function name, as defined in the MIDI specification.\n */\nexport const getControlFunction = (controlNumber: number, controlValue: number) => {\n\t// A switch statement is used instead of an object mapping so that TypeScript\n\t// will treat the return value as a literal, instead of a generic string.\n\tswitch (controlNumber) {\n\t\t// 0-31 MSB (Most Significant Byte / Coarse Value)\n\t\tcase 0: return 'bankselect';\n\t\tcase 1: return 'modulation';\n\t\tcase 2: return 'breathcontroller';\n\t\tcase 4: return 'footcontroller';\n\t\tcase 5: return 'portamentotime';\n\t\tcase 6: return 'dataentry';\n\t\tcase 7: return 'volume';\n\t\tcase 8: return 'balance';\n\t\tcase 10: return 'pan';\n\t\tcase 11: return 'expressioncontroller';\n\t\tcase 12: return 'effect1';\n\t\tcase 13: return 'effect2';\n\t\tcase 16: return 'generalpurposecontroller1';\n\t\tcase 17: return 'generalpurposecontroller2';\n\t\tcase 18: return 'generalpurposecontroller3';\n\t\tcase 19: return 'generalpurposecontroller4';\n\n\t\t// 32-63 LSB (Least Significant Byte / Fine Value) correspond to their MSB equivalent.\n\t\t// They are dynamically assigned based on values 0-31.\n\t\t// TODO: How are \"*fine\" values used? Can they be combined, so \"volume\" and \"volumefine\" can be (optionally) consumed as one thing, without thinking about this implementation detail.\n\t\tcase 32: return 'bankselectfine';\n\t\tcase 33: return 'modulationfine';\n\t\tcase 34: return 'breathcontrollerfine';\n\t\tcase 36: return 'footcontrollerfine';\n\t\tcase 37: return 'portamentotimefine';\n\t\tcase 38: return 'dataentryfine';\n\t\tcase 39: return 'volumefine';\n\t\tcase 40: return 'balancefine';\n\t\tcase 42: return 'panfine';\n\t\tcase 43: return 'expressioncontrollerfine';\n\t\tcase 44: return 'effect1fine';\n\t\tcase 45: return 'effect2fine';\n\t\tcase 48: return 'generalpurposecontroller1fine';\n\t\tcase 49: return 'generalpurposecontroller2fine';\n\t\tcase 50: return 'generalpurposecontroller3fine';\n\t\tcase 51: return 'generalpurposecontroller4fine';\n\n\t\tcase 64: return onOff(controlValue, 'sustainoff', 'sustainon');\n\t\tcase 65: return onOff(controlValue, 'portamentooff', 'portamentoon');\n\t\tcase 66: return onOff(controlValue, 'sostenutooff', 'sostenutoon');\n\t\tcase 67: return onOff(controlValue, 'softoff', 'softon');\n\t\tcase 68: return onOff(controlValue, 'legatooff', 'legatoon');\n\t\tcase 69: return onOff(controlValue, 'hold2off', 'hold2on');\n\n\t\tcase 70: return 'soundcontroller1';\n\t\tcase 71: return 'soundcontroller2';\n\t\tcase 72: return 'soundcontroller3';\n\t\tcase 73: return 'soundcontroller4';\n\t\tcase 74: return 'soundcontroller5';\n\t\tcase 75: return 'soundcontroller6';\n\t\tcase 76: return 'soundcontroller7';\n\t\tcase 77: return 'soundcontroller8';\n\t\tcase 78: return 'soundcontroller9';\n\t\tcase 79: return 'soundcontroller10';\n\n\t\tcase 80: return 'generalpurposecontroller5';\n\t\tcase 81: return 'generalpurposecontroller6';\n\t\tcase 82: return 'generalpurposecontroller7';\n\t\tcase 83: return 'generalpurposecontroller8';\n\n\t\tcase 84: return 'portamentocontrol';\n\t\tcase 91: return 'effectdepth1';\n\t\tcase 92: return 'effectdepth2';\n\t\tcase 93: return 'effectdepth3';\n\t\tcase 94: return 'effectdepth4';\n\t\tcase 95: return 'effectdepth5';\n\t\tcase 96: return 'dataincrement';\n\t\tcase 97: return 'datadecrement';\n\t\tcase 98: return 'nonregisteredparameternumberfine';\n\t\tcase 99: return 'nonregisteredparameternumber';\n\t\tcase 100: return 'registeredparameternumberfine';\n\t\tcase 101: return 'registeredparameternumber';\n\t}\n\n\treturn null;\n};\n\n/**\n * For a given `controlNumber` and `controlValue`, get the corresponding\n * channel mode message defined in the MIDI specification.\n *\n * This is very similar to `getControlFunction()`, except control numbers\n * 120 - 127 are reserved for channel mode messages instead of being regular\n * control change messages. Keeping this logic separate from that function\n * allows for more targeted type coverage.\n */\nexport const getChannelModeMessage = (controlNumber: number, controlValue: number) => {\n\t// A switch statement is used instead of an object mapping so that TypeScript\n\t// will treat the return value as a literal, instead of a generic string.\n\tswitch (controlNumber) {\n\t\tcase 120: return onOffStrict(controlValue, 'allsoundoff', null);\n\t\tcase 121: return onOffStrict(controlValue, 'resetallcontrollers', null);\n\t\tcase 122: return onOffStrict(controlValue, 'localcontroloff', 'localcontrolon');\n\t\tcase 123: return onOffStrict(controlValue, 'allnotesoff', null);\n\t\tcase 124: return onOffStrict(controlValue, 'omnimodeoff', null);\n\t\tcase 125: return onOffStrict(controlValue, 'omnimodeon', null);\n\t\tcase 126: return 'monomodeon';\n\t\tcase 127: return onOffStrict(controlValue, 'polymodeon', null);\n\t}\n\n\treturn null;\n};\n","export const BITS_PER_DATA = 7;\nexport const DATA_RANGE = 2 ** BITS_PER_DATA;\nexport const DATA_RANGE_WITH_LSB = DATA_RANGE ** 2;\nexport const PITCH_BEND_NEUTRAL = DATA_RANGE_WITH_LSB / 2;\n","import { getControlFunction, getChannelModeMessage } from './lib/controlChangeUtils.js';\nimport { PITCH_BEND_NEUTRAL } from './lib/constants.js';\nimport { combineMsbAndLsb } from './lib/numberUtils.js';\n\nexport type MidiData = Uint8Array | [number, number, number];\n\n/**\n * Parse data from a midimessage event.\n */\nconst parseMidi = ([status, data1, data2]: MidiData) => {\n\t/*\n\t\tStatus byte is, as the name suggests, 1 byte:\n\t\t- 4 bits for the channel number (1-16)\n\t\t- 4 bits for the message code (0-240 at intervals of 16)\n\n\t\tdata1 and data2 are 7 bits (0-127). In some cases, they\n\t\tare combined for a total of 14 bits (0-16383).\n\t*/\n\tconst sharedData = {\n\t\tmessageCode: status & 0xF0,\n\t\tchannel: (status & 0x0F) + 1,\n\t};\n\n\tswitch (sharedData.messageCode) {\n\t\tcase 0x80:\n\t\t\treturn {\n\t\t\t\t...sharedData,\n\t\t\t\tmessageType: 'noteoff',\n\t\t\t\tkey: data1,\n\t\t\t\tvelocity: data2,\n\t\t\t} as const;\n\n\t\tcase 0x90:\n\t\t\treturn {\n\t\t\t\t...sharedData,\n\t\t\t\tmessageType: data2 === 0 ? 'noteoff' : 'noteon',\n\t\t\t\tkey: data1,\n\t\t\t\tvelocity: data2,\n\t\t\t} as const;\n\n\t\tcase 0xA0:\n\t\t\treturn {\n\t\t\t\t...sharedData,\n\t\t\t\tmessageType: 'keypressure',\n\t\t\t\tkey: data1,\n\t\t\t\tpressure: data2,\n\t\t\t} as const;\n\n\t\tcase 0xB0:\n\t\t\tif (data1 < 120) {\n\t\t\t\treturn {\n\t\t\t\t\t...sharedData,\n\t\t\t\t\tmessageType: 'controlchange',\n\t\t\t\t\tcontrolNumber: data1,\n\t\t\t\t\tcontrolFunction: getControlFunction(data1, data2),\n\t\t\t\t\tcontrolValue: data2,\n\t\t\t\t} as const;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...sharedData,\n\t\t\t\tmessageType: 'channelmodechange',\n\t\t\t\tcontrolNumber: data1,\n\t\t\t\tchannelModeMessage: getChannelModeMessage(data1, data2),\n\t\t\t\tcontrolValue: data2,\n\t\t\t} as const;\n\n\t\tcase 0xC0:\n\t\t\treturn {\n\t\t\t\t...sharedData,\n\t\t\t\tmessageType: 'programchange',\n\t\t\t\tprogram: data1,\n\t\t\t} as const;\n\n\t\tcase 0xD0:\n\t\t\treturn {\n\t\t\t\t...sharedData,\n\t\t\t\tmessageType: 'channelpressure',\n\t\t\t\tpressure: data1,\n\t\t\t} as const;\n\n\t\tcase 0xE0: {\n\t\t\tconst pitchBend = combineMsbAndLsb(data2, data1);\n\t\t\t/*\n\t\t\t\tMinimum is 0\n\t\t\t\tNeutral is 8,192\n\t\t\t\tMaximum is 16,383\n\n\t\t\t\tTo map the min and max to -1 and 1, while ensuring neutral\n\t\t\t\t(8,192) is exactly 0, we need to divide by slightly different\n\t\t\t\tvalues depending on whether the pitch bend is up or down, as\n\t\t\t\tup has 1 less possible value.\n\t\t\t*/\n\t\t\tconst divider = pitchBend <= PITCH_BEND_NEUTRAL\n\t\t\t\t? PITCH_BEND_NEUTRAL\n\t\t\t\t: (PITCH_BEND_NEUTRAL - 1);\n\n\t\t\treturn {\n\t\t\t\t...sharedData,\n\t\t\t\tmessageType: 'pitchbendchange',\n\t\t\t\tpitchBend,\n\t\t\t\tpitchBendMultiplier: (pitchBend - PITCH_BEND_NEUTRAL) / divider,\n\t\t\t} as const;\n\t\t}\n\n\t\tdefault:\n\t\t\treturn {\n\t\t\t\t...sharedData,\n\t\t\t\tmessageType: 'unknown',\n\t\t\t\tdata1,\n\t\t\t\tdata2,\n\t\t\t} as const;\n\t}\n};\n\nexport default parseMidi;\n"],"names":["const","onOff","controlValue","offValue","onValue","onOffStrict","getControlFunction","controlNumber","getChannelModeMessage","DATA_RANGE","PITCH_BEND_NEUTRAL","sharedData","messageCode","status","channel","Object","messageType","key","data1","velocity","data2","pressure","controlFunction","channelModeMessage","program","pitchBend","pitchBendMultiplier"],"mappings":"AAGAA,IAAMC,WAAiBC,EAAsBC,EAAcC,UAC1DF,EAAe,GAAKC,EAAWC,GAQ1BC,WAAuBH,EAAsBC,EAAcC,UAC3C,IAAjBF,EACIC,EAEa,MAAjBD,EACIE,EAED,MAOKE,WAAsBC,EAAuBL,UAGjDK,QAEF,QAAU,kBACV,QAAU,kBACV,QAAU,wBACV,QAAU,sBACV,QAAU,sBACV,QAAU,iBACV,QAAU,cACV,QAAU,eACV,SAAW,WACX,SAAW,4BACX,SAAW,eACX,SAAW,eACX,SAAW,iCACX,SAAW,iCACX,SAAW,iCACX,SAAW,iCAKX,SAAW,sBACX,SAAW,sBACX,SAAW,4BACX,SAAW,0BACX,SAAW,0BACX,SAAW,qBACX,SAAW,kBACX,SAAW,mBACX,SAAW,eACX,SAAW,gCACX,SAAW,mBACX,SAAW,mBACX,SAAW,qCACX,SAAW,qCACX,SAAW,qCACX,SAAW,qCAEX,UAAWN,EAAMC,EAAc,aAAc,kBAC7C,UAAWD,EAAMC,EAAc,gBAAiB,qBAChD,UAAWD,EAAMC,EAAc,eAAgB,oBAC/C,UAAWD,EAAMC,EAAc,UAAW,eAC1C,UAAWD,EAAMC,EAAc,YAAa,iBAC5C,UAAWD,EAAMC,EAAc,WAAY,gBAE3C,SAAW,wBACX,SAAW,wBACX,SAAW,wBACX,SAAW,wBACX,SAAW,wBACX,SAAW,wBACX,SAAW,wBACX,SAAW,wBACX,SAAW,wBACX,SAAW,yBAEX,SAAW,iCACX,SAAW,iCACX,SAAW,iCACX,SAAW,iCAEX,SAAW,yBACX,SAAW,oBACX,SAAW,oBACX,SAAW,oBACX,SAAW,oBACX,SAAW,oBACX,SAAW,qBACX,SAAW,qBACX,SAAW,wCACX,SAAW,oCACX,UAAY,qCACZ,UAAY,mCAGX,MAYKM,WAAyBD,EAAuBL,UAGpDK,QACF,WAAYF,EAAYH,EAAc,cAAe,WACrD,WAAYG,EAAYH,EAAc,sBAAuB,WAC7D,WAAYG,EAAYH,EAAc,kBAAmB,uBACzD,WAAYG,EAAYH,EAAc,cAAe,WACrD,WAAYG,EAAYH,EAAc,cAAe,WACrD,WAAYG,EAAYH,EAAc,aAAc,WACpD,UAAY,kBACZ,WAAYG,EAAYH,EAAc,aAAc,aAGnD,MClIKO,WAAa,EADG,GAGhBC,WADsBD,EAAc,GACO,sDCejDE,EAAa,CAClBC,YAAsB,IAATC,EACbC,QAA2B,GAAR,GAATD,WAGHF,EAAWC,kBACb,WACGG,iBACHJ,GACHK,YAAa,UACbC,IAAKC,EACLC,SAAUC,SAGP,WACGL,iBACHJ,GACHK,YAAuB,IAAVI,EAAc,UAAY,SACvCH,IAAKC,EACLC,SAAUC,SAGP,WACGL,iBACHJ,GACHK,YAAa,cACbC,IAAKC,EACLG,SAAUD,SAGP,WACAF,EAAQ,IACJH,iBACHJ,GACHK,YAAa,gBACbT,cAAeW,EACfI,gBAAiBhB,EAAmBY,EAAOE,GAC3ClB,aAAckB,IAITL,iBACHJ,GACHK,YAAa,oBACbT,cAAeW,EACfK,mBAAoBf,EAAsBU,EAAOE,GACjDlB,aAAckB,SAGX,WACGL,iBACHJ,GACHK,YAAa,gBACbQ,QAASN,SAGN,WACGH,iBACHJ,GACHK,YAAa,kBACbK,SAAUH,SAGP,QACEO,GAA6BL,GDlFT,GCkFgBF,SAenCH,iBACHJ,GACHK,YAAa,4BACbS,EACAC,qBAAsBD,EAAYf,IARnBe,GAAaf,EAC1BA,EACCA,EAAqB,oBAWlBK,iBACHJ,GACHK,YAAa,gBACbE,QACAE"}