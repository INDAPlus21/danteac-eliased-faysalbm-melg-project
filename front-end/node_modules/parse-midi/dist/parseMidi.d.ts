export declare type MidiData = Uint8Array | [number, number, number];
/**
 * Parse data from a midimessage event.
 */
declare const parseMidi: ([status, data1, data2]: MidiData) => {
    readonly messageType: "noteoff" | "noteon";
    readonly key: number;
    readonly velocity: number;
    readonly messageCode: number;
    readonly channel: number;
} | {
    readonly messageType: "keypressure";
    readonly key: number;
    readonly pressure: number;
    readonly messageCode: number;
    readonly channel: number;
} | {
    readonly messageType: "controlchange";
    readonly controlNumber: number;
    readonly controlFunction: "bankselect" | "modulation" | "breathcontroller" | "footcontroller" | "portamentotime" | "dataentry" | "volume" | "balance" | "pan" | "expressioncontroller" | "effect1" | "effect2" | "generalpurposecontroller1" | "generalpurposecontroller2" | "generalpurposecontroller3" | "generalpurposecontroller4" | "bankselectfine" | "modulationfine" | "breathcontrollerfine" | "footcontrollerfine" | "portamentotimefine" | "dataentryfine" | "volumefine" | "balancefine" | "panfine" | "expressioncontrollerfine" | "effect1fine" | "effect2fine" | "generalpurposecontroller1fine" | "generalpurposecontroller2fine" | "generalpurposecontroller3fine" | "generalpurposecontroller4fine" | "sustainoff" | "sustainon" | "portamentooff" | "portamentoon" | "sostenutooff" | "sostenutoon" | "softoff" | "softon" | "legatooff" | "legatoon" | "hold2off" | "hold2on" | "soundcontroller1" | "soundcontroller2" | "soundcontroller3" | "soundcontroller4" | "soundcontroller5" | "soundcontroller6" | "soundcontroller7" | "soundcontroller8" | "soundcontroller9" | "soundcontroller10" | "generalpurposecontroller5" | "generalpurposecontroller6" | "generalpurposecontroller7" | "generalpurposecontroller8" | "portamentocontrol" | "effectdepth1" | "effectdepth2" | "effectdepth3" | "effectdepth4" | "effectdepth5" | "dataincrement" | "datadecrement" | "nonregisteredparameternumberfine" | "nonregisteredparameternumber" | "registeredparameternumberfine" | "registeredparameternumber" | null;
    readonly controlValue: number;
    readonly messageCode: number;
    readonly channel: number;
} | {
    readonly messageType: "channelmodechange";
    readonly controlNumber: number;
    readonly channelModeMessage: "allsoundoff" | "resetallcontrollers" | "localcontroloff" | "localcontrolon" | "allnotesoff" | "omnimodeoff" | "omnimodeon" | "monomodeon" | "polymodeon" | null;
    readonly controlValue: number;
    readonly messageCode: number;
    readonly channel: number;
} | {
    readonly messageType: "programchange";
    readonly program: number;
    readonly messageCode: number;
    readonly channel: number;
} | {
    readonly messageType: "channelpressure";
    readonly pressure: number;
    readonly messageCode: number;
    readonly channel: number;
} | {
    readonly messageType: "pitchbendchange";
    readonly pitchBend: number;
    readonly pitchBendMultiplier: number;
    readonly messageCode: number;
    readonly channel: number;
} | {
    readonly messageType: "unknown";
    readonly data1: number;
    readonly data2: number;
    readonly messageCode: number;
    readonly channel: number;
};
export default parseMidi;
